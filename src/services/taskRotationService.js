/**
 * Service de rotation automatique des t√¢ches √† minuit
 * D√©place les t√¢ches du jour vers l'historique et charge les t√¢ches du jour suivant
 */

import { addToHistory } from './historyService';

// Cl√© pour stocker l'√©tat du blocage
const ROTATION_BLOCKED_KEY = 'task_rotation_blocked';
const LAST_ROTATION_KEY = 'last_task_rotation';

// V√©rifier si la rotation est bloqu√©e
export const isRotationBlocked = () => {
  return localStorage.getItem(ROTATION_BLOCKED_KEY) === 'true';
};

// Activer/d√©sactiver le blocage de rotation
export const setRotationBlocked = (blocked) => {
  localStorage.setItem(ROTATION_BLOCKED_KEY, blocked ? 'true' : 'false');
};

// Obtenir la derni√®re date de rotation
export const getLastRotationDate = () => {
  const lastRotation = localStorage.getItem(LAST_ROTATION_KEY);
  return lastRotation ? new Date(lastRotation) : null;
};

// Sauvegarder la date de derni√®re rotation
export const setLastRotationDate = (date) => {
  localStorage.setItem(LAST_ROTATION_KEY, date.toISOString());
};

// V√©rifier si on doit faire une rotation (nouveau jour)
export const shouldRotate = () => {
  if (isRotationBlocked()) {
    console.log('üîí Rotation bloqu√©e par l\'utilisateur');
    return false;
  }

  const now = new Date();
  const lastRotation = getLastRotationDate();
  
  if (!lastRotation) {
    // Premi√®re utilisation
    return true;
  }
  
  // V√©rifier si on est pass√© √† un nouveau jour
  const lastDay = lastRotation.toDateString();
  const currentDay = now.toDateString();
  
  return lastDay !== currentDay;
};

// Effectuer la rotation des t√¢ches
export const rotateTasks = (tasks, updateTasks, isManualRotation = false) => {
  if (!shouldRotate() && !isManualRotation) {
    return false;
  }

  const now = new Date();
  const today = now.toDateString();
  const yesterday = new Date(now);
  yesterday.setDate(yesterday.getDate() - 1);

  console.log('üîÑ Rotation des t√¢ches en cours...');

  // Formater les dates en YYYY-MM-DD
  const formatDate = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const yesterdayStr = formatDate(yesterday);
  const todayStr = formatDate(now);

  // S√©parer les t√¢ches
  const yesterdayTasks = [];
  const todayTasks = [];
  const futureTasks = [];
  const tasksWithoutDate = [];
  const routineTasks = [];

  tasks.forEach(task => {
    // Les t√¢ches routine sont sp√©ciales
    if (task.type === 'routine') {
      routineTasks.push(task);
      return;
    }

    const taskDate = task.date || task.startDate;

    if (!taskDate || taskDate === '-') {
      // T√¢ches sans date restent dans To-Do
      tasksWithoutDate.push(task);
    } else if (taskDate === yesterdayStr) {
      // T√¢ches d'hier -> historique seulement si "Fait"
      if (task.status === 'Fait' || task.status === 'done' || task.status === 'termin√©') {
        yesterdayTasks.push(task);
      } else {
        // Les t√¢ches non termin√©es d'hier restent visibles
        todayTasks.push(task);
      }
    } else if (taskDate === todayStr) {
      // T√¢ches d'aujourd'hui -> restent visibles
      todayTasks.push(task);
    } else if (taskDate > todayStr) {
      // T√¢ches futures -> gard√©es pour plus tard
      futureTasks.push(task);
    } else {
      // T√¢ches anciennes (avant hier) -> historique seulement si "Fait"
      if (task.status === 'Fait' || task.status === 'done' || task.status === 'termin√©') {
        yesterdayTasks.push(task);
      } else {
        // Les t√¢ches non termin√©es restent visibles
        todayTasks.push(task);
      }
    }
  });
  
  // Archiver seulement les t√¢ches termin√©es dans l'historique
  // Sauf les routines qui sont recr√©√©es chaque jour
  const tasksToArchive = yesterdayTasks.filter(t => t.type !== 'routine');
  if (tasksToArchive.length > 0) {
    addToHistory(yesterday, tasksToArchive);
    console.log(`üì¶ ${tasksToArchive.length} t√¢che(s) termin√©e(s) archiv√©e(s) dans l'historique`);
  }
  
  // Cr√©er les nouvelles copies des routines pour aujourd'hui
  const newRoutineTasks = routineTasks.map(routine => ({
    ...routine,
    id: `${routine.id}_${todayStr}`, // ID unique pour chaque jour
    date: todayStr,
    status: '√Ä faire' // R√©initialiser le statut
  }));
  
  // Mettre √† jour la liste des t√¢ches
  // Garder les t√¢ches d'aujourd'hui, futures, sans date, routines originales et nouvelles routines
  const newTaskList = [
    ...todayTasks,
    ...futureTasks,
    ...tasksWithoutDate,
    ...routineTasks, // Garder les routines originales
    ...newRoutineTasks // Ajouter les nouvelles copies pour aujourd'hui
  ];
  
  // Mettre √† jour les t√¢ches via le contexte
  if (updateTasks) {
    updateTasks(newTaskList);
  }
  
  // Marquer la rotation comme effectu√©e
  setLastRotationDate(now);
  
  console.log('‚úÖ Rotation termin√©e');
  console.log(`   - ${yesterdayTasks.length} t√¢che(s) archiv√©e(s)`);
  console.log(`   - ${todayTasks.length} t√¢che(s) du jour affich√©e(s)`);
  console.log(`   - ${tasksWithoutDate.length} t√¢che(s) sans date conserv√©e(s)`);
  
  return true;
};

// Initialiser le syst√®me de rotation (√† appeler au d√©marrage)
export const initTaskRotation = (tasks, updateTasks) => {
  // V√©rifier imm√©diatement au d√©marrage
  if (shouldRotate()) {
    rotateTasks(tasks, updateTasks, false);
  }

  // V√©rifier toutes les minutes si on doit faire une rotation
  const checkInterval = setInterval(() => {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();

    // V√©rifier √† minuit pile (00:00)
    if (hours === 0 && minutes === 0) {
      console.log('‚è∞ Minuit ! V√©rification de rotation...');
      rotateTasks(tasks, updateTasks, false);
    }
  }, 60000); // V√©rifier toutes les minutes
  
  // Retourner la fonction pour arr√™ter l'intervalle si n√©cessaire
  return () => clearInterval(checkInterval);
};

// Forcer une rotation manuelle (pour les tests ou besoins sp√©cifiques)
export const forceRotation = (tasks, updateTasks) => {
  const wasBlocked = isRotationBlocked();

  // D√©bloquer temporairement
  setRotationBlocked(false);

  // R√©initialiser la derni√®re date pour forcer la rotation
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  setLastRotationDate(yesterday);

  // Effectuer la rotation avec le flag manuel
  const result = rotateTasks(tasks, updateTasks, true);

  // Restaurer l'√©tat de blocage
  setRotationBlocked(wasBlocked);

  return result;
};